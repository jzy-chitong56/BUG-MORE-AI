#IFDEF GLOBAL
  integer item_exp_state = 0
  integer item_exp_count = 0
  unit itemhero = null
  boolean item_expanding = false
  boolean item_job_running = false
  boolean expitem_buy = false
  //location item_exp_guard_loc = Location(0,0)  // no need guard
#ELSE

function ItemExpansionReset takes boolean exp returns nothing
  if itemhero != null and UnitAlive(itemhero) and not IsUnitBuying(itemhero) and IsStandardUnit(itemhero) then
    if not exp then
      call RecycleGuardPosition(itemhero)
    else
      call TQAddUnitJob(6, RESET_GUARD_POSITION, 80, itemhero)
    endif
  endif
  set item_expanding = false
  set expitem_buy = false
  set item_job_running = false
  set item_exp_state = 0
  set item_exp_count = 0
  set not_taken_expansion = null
  set itemhero = null
endfunction

function UseExpansionItem takes item t returns boolean
  local unit u = CreateUnit(Player(PLAYERPASSIVE), old_id[racial_expansion], GetUnitX(not_taken_expansion), GetUnitY(not_taken_expansion), 270.0)
  local location loc = GetUnitLoc(not_taken_expansion)
  local location l = GetUnitLoc(u)
  //local location rl = AIGetProjectedLoc(loc, l, 850, 0)  //Guarding position
  local boolean b = DistanceBetweenPoints_kd(l, loc) <= race_max_expa_mine_distance
  call RemoveUnitAM(u)
  set u = null
  if b then
    call CreateDebugTagLoc("Item expansion use item loc", 10, GetLocationX(l), GetLocationY(l), 3.00, 1.50)
    call UnitUseItemPoint(itemhero, t, GetLocationX(l), GetLocationY(l))
    //call MoveLocation(item_exp_guard_loc, GetLocationX(rl), GetLocationY(rl))
  endif
  set loc = null
  //call RemoveLocation(rl)
  //set rl = null
  call RemoveLocation(l)
  set l = null
  return b
endfunction

function ItemExpansionJob takes nothing returns nothing
  local item exp_item = null
  call DisplayToAllJobDebug("ITEM_EXPANSION JOB STARTED")
  if town_threatened or not_taken_expansion == null or current_expansion == null or current_expansion != not_taken_expansion or CheckExpansionTaken(not_taken_expansion) then
    call Trace("Item expansion : Cannot Expansion or no Expansion")  // no need ChooseExpansion() , this is passive expansion , avoidance buy repeat item
    call ItemExpansionReset(false)
    return
  endif
  if itemhero != null then
    if GetItemOfTypeOnUnit(race_item_expansion_item_id, itemhero) == null then
      set itemhero = null  //prevent item change hero
    elseif not UnitAlive(itemhero) or not IsStandardUnit(itemhero) then
      call Trace("Item expansion : hero no ready")
      call ItemExpansionReset(false)
      return
    endif
  endif
  set exp_item = GetItemOfType(exp_item,race_item_expansion_item_id)
  if itemhero == null then
    if exp_item != null then
      set itemhero = GetItemHero(exp_item)
      call SetItemDroppable(exp_item, false)  //prevent droppable
      call SetItemPawnable(exp_item, false)  //prevent sell
      set item_exp_state = 1
      set item_exp_count = 0
    endif
  endif
  if not item_job_running then
    set exp_time_count = ai_time
    set item_job_running = true
  endif
  if item_exp_state == 0 then
    set exp_item = null
    call Trace("Item expansion state 0 - Check Expansion Hero and Location , Distance :" + Int2Str(R2I(DistanceBetweenPoints_kd(home_location,GetUnitLoc(not_taken_expansion)))))
    if expitem_buy == false then
      if shop_ordered or GetGold() < gold_price[race_item_expansion_item_id] or GetWood() < wood_price[race_item_expansion_item_id] then
        call Trace("Item expansion state 0 - No gold or wood or buy item job is runing for other item")
        call ItemExpansionReset(false)
        return
      endif
      if shop_unit == null or not UnitAlive(shop_unit) or GetOwningPlayer(shop_unit) != ai_player then
        set shop_unit = GetOneOfId(shop_unit, ai_player, old_id[racial_shop])
      endif
      if shop_unit == null then
        call Trace("Item expansion state 0 - no shop")
        call ItemExpansionReset(false)
        return
      endif
      set shop_wanted = 1
      set shop_distance_limit = raceshop_distance_limit
      set shop_ordered = true
      set expitem_buy = true
      call TQAddJob(2, BUY_ITEM, race_item_expansion_item_id)
    elseif item_exp_count > 4 or not shop_ordered then
      call Trace("Item expansion state 0 - buy item fail")
      call ItemExpansionReset(false)
      return
    endif
    set item_exp_count = item_exp_count + 1
    call CreateDebugTag("Item expansion state 0 - wait buy item", 10, shop_unit, 3.00, 1.50)
  elseif item_exp_state == 1 then
    if GetLocationEnemyStrength(GetUnitX(not_taken_expansion), GetUnitY(not_taken_expansion), 1200, false) <= 0 then
      if exp_item != null and GetLocationNonCreepStrength(GetUnitX(itemhero), GetUnitY(itemhero), 1200) <= 0 then
        call RemoveGuardPosition(itemhero)
        if DistanceBetweenUnits(itemhero, not_taken_expansion) > 1200 then
          call CreateDebugTag("Item expansion state 1 - move to expansion", 10, itemhero, 3.00, 1.50)
          call IssuePointOrder(itemhero, "move", GetUnitX(not_taken_expansion), GetUnitY(not_taken_expansion))
          call TQAddJob(RMin(4, RMax(GetTimeToReachUnit(itemhero, not_taken_expansion) + 1,1)), ITEM_EXPANSION, 0)
        else
          if item_exp_count < 4 then
            if UseExpansionItem(exp_item) then
              call ItemExpansionReset(true)
              set exp_item = null
              call CreateDebugTag("Item expansion state 1 - want to use item", 10, itemhero, 3.00, 1.50)
              return
            endif
            call CreateDebugTag("Item expansion state 1 - use item done", 10, itemhero, 3.00, 1.50)
            call IssuePointOrder(itemhero, "move", GetUnitX(not_taken_expansion), GetUnitY(not_taken_expansion))  // Prevent the hero's position from getting stuck
            call TQAddJob(2, ITEM_EXPANSION, 0)
            set item_exp_count = item_exp_count + 1
          else
            call CreateDebugTag("Item expansion state 1 - use item fail", 10, itemhero, 3.00, 1.50)
            call ItemExpansionReset(false)
          endif
        endif
        set exp_item = null
        return
      endif
      call Trace("Item expansion state 1 - no item or no expansion , end job")
      if exp_item != null then
        //call SetItemDroppable(exp_item, true)  //Picking up by other players will disrupt balance
        call SetItemPawnable(exp_item, true)  //can selling
        set exp_item = null
      endif
      call ItemExpansionReset(false)
      return
    else
      set exp_item = null
      if item_exp_count > 8 then
        call Trace("Item expansion state 1 - rush creep fail")
        call ItemExpansionReset(false)
        return
      endif
      call Trace("Item expansion state 1 - Wait rush creep")
      set item_exp_count = item_exp_count + 1
    endif
  endif
  call TQAddJob(16, ITEM_EXPANSION, 0)
endfunction
#ENDIF