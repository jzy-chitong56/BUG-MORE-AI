#IFDEF GLOBAL
    integer array army_owner
    location array army_loc
    location array army_dir
    location array army_future
    real array army_strength
    group array army_group
    integer array army_count
    integer army_num = 0
    real army_radius = 1500
    real army_future_mult = 3
    group in_army_group = CreateGroup()
    integer main_army = -1
    integer lastArmyNum = 0
    integer lastFreeNum = 0
    integer mode = 0
    integer most_threatened_player_town = -1
    location captain_home = null
    boolean captain_tp = true
    integer tmpmainarmy = -1
    integer town_threat_count = 0

#ELSE
// Army Tracker

function CopyArmy takes integer from, integer to returns nothing
  set army_owner[to] = army_owner[from]
  set army_loc[to] = army_loc[from]
  set army_dir[to] = army_dir[from]
  set army_future[to] = army_future[from]
  set army_strength[to] = army_strength[from]
  set army_group[to] = army_group[from]
  set army_count[to] = army_count[from]
  set town_threat_army[to] = town_threat_army[from] //TODO Technically this is incorrect until job is processed as copy town does not handle this
  if main_army == from then
    set main_army = to
  endif
endfunction

function TrackArmy takes integer num returns boolean
  local group g = CreateGroup()
  local unit u = FirstOfGroup(army_group[num])
  local unit tu = null
  local location l = null
  local real x = 0
  local real y = 0
  local real s = 0
  local integer p = army_owner[num]
  local integer i = 1
  local integer c = 0
  local player ap = Player(p)
  local player up = null
  if u != null then  // If tracking existing army select range from current position not historic position
    call GroupEnumUnitsInRange(g, GetUnitX(u), GetUnitY(u), army_radius, null)
  else
    call GroupEnumUnitsInRangeOfLoc(g, army_loc[num], army_radius, null)
  endif
  call GroupClear(army_group[num])
  set army_strength[num] = 0
  set army_count[num] = 0
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if ModuloInteger(i, 32) == 0 then
      call Sleep(0.02)
    endif
    set up = GetOwningPlayer(u)
    if up == ap and not IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitType(u, UNIT_TYPE_PEON) and UnitAlive(u) and not IsUnitHidden(u) and (up != ai_player or (IsStandardUnit(u) and not IsUnitBuying(u))) and GetUnitCurrentOrder(u) != OrderId("harvest") and GetUnitCurrentOrder(u) != OrderId("resumeharvesting") and not IsUnitInGroup(u, in_army_group) then // harvest check to ignore harvesting ghouls as they not an army
      call GroupAddUnit(army_group[num], u)
      call GroupAddUnit(in_army_group, u)
      set x = x + GetUnitX(u)  // Prevent loc exceeding map range
      set y = y + GetUnitY(u)
      //set l = GetSumLoc_dd(l, GetUnitLoc(u))
      set c = c + 1
      set tu = u
      if up != ai_player and IsUnitInvisibleAM(u, ai_player) then
        // Fix using invisible units to exploit amai to force defend its town
      else
        set s = s + GetUnitStrength(u)
      endif
    endif
    call GroupRemoveUnit(g, u)
    set i = i + 1
  endloop
  call DestroyGroup(g)
  set g = null
  set ap = null
  set up = null
  call RemoveLocation(army_dir[num])
  call RemoveLocation(army_future[num])
  if c <= 1 or s == 0 then
    set army_dir[num] = null
    set army_future[num] = null
    call DestroyGroup(army_group[num])
    set army_group[num] = null
    call RemoveLocation(army_loc[num])
    set army_loc[num] = null
    if tu != null then
      call GroupRemoveUnit(in_army_group, tu)  // count is 1
      set tu = null
    endif
    //call RemoveLocation(l)
    //set l = null
    return false
  endif
  set army_strength[num] = s
  set army_count[num] = c
  set x = x / Max(c, 1)
  set y = y / Max(c, 1)
  //set l = GetDivisionLoc_d(l, Max(c, 1))
  set army_dir[num] = GetSubtractionLoc_dd(Location(x, y), army_loc[num])
  set army_loc[num] = Location(x, y)
  set l = GetSumLoc_kd(army_loc[num], GetMultipleLoc(army_dir[num], army_future_mult)) // This just sets a point in direction we want
  set army_future[num] = GetProjectedLoc(army_loc[num], l, GetRandomReal(full_threat_distance, no_threat_distance)) // Fixed location in direction army is going
  if Player(p) == ai_player then
    if tmpmainarmy < 0 and major_hero != null and IsUnitInGroup(major_hero, army_group[num]) then
      set tmpmainarmy = num // fallback main army
    endif
    call CreateDebugTagLoc("Tracked Army: " + Int2Str(num) + " Strength: " + Int2Str(R2I(army_strength[num])), 10, x, y, 8.00, 3.00)
  endif
  // if army_strength[num] != 0 then
    // call PingMinimap(GetLocationX(l), GetLocationY(l), 4)
  // endif
  call RemoveLocation(l)
  set l = null
  set tu = null
  return true
endfunction

function TrackExistingArmies takes nothing returns nothing
  local integer i = lastArmyNum
  local integer first_free = lastFreeNum
  loop
    exitwhen i >= army_num
    exitwhen i != lastArmyNum and ModuloInteger(i,30) == 0 // Sleep every 30 armies to avoid infinite loops
    if TrackArmy(i) then
      if i != first_free then
        call CopyArmy(i, first_free)
      endif
      set first_free = first_free + 1
    else
      if main_army == i then
        set main_army = -1
      endif
      if tmpmainarmy == i then
        set tmpmainarmy = -1
      endif
    endif
    set i = i + 1
  endloop
  if i >= army_num then
    set army_num = first_free
    set mode = 1
    set lastArmyNum = 0
    set lastFreeNum = 0
  else
    set lastFreeNum = first_free
    // This ensures list of armies are still partly usuable even though army track isn't quite finished
    // as the array is kept in sync with the army_num variable
    loop
      exitwhen i >= army_num
      call CopyArmy(i, first_free)
      set first_free = first_free + 1
      set i = i + 1
    endloop
    set lastArmyNum = lastFreeNum
    set army_num = first_free
    call TQAddJob(1, ARMY_TRACK, 0)
  endif
endfunction

function SeedNewArmyAtLoc takes location l, integer p returns nothing
  set army_owner[army_num] = p
  set army_loc[army_num] = l
  set army_dir[army_num] = Location(0,0)
  set army_future[army_num] = Location(0,0)
  set army_group[army_num] = CreateGroup()
  if TrackArmy(army_num) then
    set army_num = army_num + 1
  endif
endfunction

function SeedNewArmiesForPlayer takes integer p returns nothing
  local group g = CreateGroup()
  local unit u = null
  local integer i = 0
  call GroupEnumUnitsOfPlayer(g, Player(p), null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if ModuloInteger(i, 32) == 0 then
      call Sleep(0.02)
    endif
    if not IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitType(u, UNIT_TYPE_PEON) and UnitAlive(u) and not IsUnitHidden(u) and not IsUnitInGroup(u, in_army_group) then
      call SeedNewArmyAtLoc(GetUnitLoc(u), p)
    endif
    call GroupRemoveUnit(g, u)
  endloop
  if Player(p) == ai_player then
    // Calculate main_army to be the largest group of units
    set i = 0
    loop
      exitwhen i >= army_num
      if Player(army_owner[i]) == ai_player and (main_army < 0 or army_strength[main_army] < army_strength[i]) then
        set main_army = i
      endif
      set i = i + 1
    endloop
  endif
  if main_army == -1 and tmpmainarmy >= 0 then
    set main_army = tmpmainarmy // backup incase cannot be calculated
  endif
  call DestroyGroup(g)
  set g = null
endfunction

function SeedNewArmies takes nothing returns nothing
  local integer p = lastFreeNum
  local player sp = null
  loop
    exitwhen p >= GetBJMaxPlayers()
    exitwhen p != lastFreeNum and ModuloInteger(p, 10) == 0 // Sleep every 10 players
    set sp = Player(p)
    if sp != null and GetPlayerSlotState(sp) == PLAYER_SLOT_STATE_PLAYING and not IsPlayerObserver(sp) and GetPlayerUnitCount(sp, false) > 0 then
      call SeedNewArmiesForPlayer(p)
    endif
    set p = p + 1
  endloop
  if p >= GetBJMaxPlayers() then
    set mode = 2
    set lastFreeNum = 0
    call GroupClear(in_army_group)
  else
    set lastFreeNum = p
    call TQAddJob(1, ARMY_TRACK, 0)
  endif
  set sp = null
endfunction

function UpdateSpecificTownThreat takes integer num returns nothing
  local integer i = 0
  local real dist = 0
  local real threat = 0
  local real max_threat = 0
  local real t = 0
  local real disttemp = 0
  local location loc = null
  local player pt = Player(town_owner[num])
  local player pa = null
  if IsPlayerAlly(pt, ai_player) then
    set t = GetLocationTowerStrength(GetLocationX(town_loc[num]), GetLocationY(town_loc[num]), ver_tower_check_radius) * 2 // Detect any tower rush events
  endif
  loop
    exitwhen i >= army_num
    set pa = Player(army_owner[i])
    if pa != ai_player and pt != pa then
      set dist = RMax(DistanceBetweenPoints(army_future[i], town_loc[num]), full_threat_distance) // Future loc
      set loc = GetSubtractionLoc(army_loc[i], town_loc[num])
      set disttemp = DistanceBetweenPoints(army_loc[i], town_loc[num])
      if disttemp < GetLengthOfLoc(army_dir[i]) and RAbs(GetAngleBetweenLocs(army_dir[i], loc)) <= 0.4 then // Current loc
        set dist = full_threat_distance
      else
        set dist = RMin(dist, disttemp)
      endif
      call RemoveLocation(loc)
      if dist <= no_threat_distance then
        //call DisplayToAll("Threat Dist:" + Real2Str(dist))
        //call DisplayToAll("Threat strength:" + Real2Str(army_strength[i]))
        //call DisplayToAll("Threat divisor:" + Real2Str(Pow(dist, distance_threat_exponent)))
        set dist = Pow(dist, distance_threat_exponent)
        if dist == 0 then
          set dist = 1
        endif
        set threat = distance_threat_mult * army_strength[i] / dist
        //call DisplayToAll("Threat:" + Real2Str(Pow(dist, distance_threat_exponent)))
        if IsPlayerAlly(pt, pa) then
          set t = t - (threat*0.3) // Only ally units reduce threat so should protect own towns over allies, but in some situations ally units enough to protect town
        else
          set t = t + threat
          if threat > max_threat then
            set max_threat = threat
            set town_threat_army[num] = i
          endif
        endif
      endif
    endif
    set i = i + 1
  endloop
  set town_threat[num] = t
  if town_count[num] > 0 then
    if pt == ai_player then
      if most_threatened_player_town == -1 or town_threat[most_threatened_player_town] < town_threat[num] then
        set most_threatened_player_town = num
      endif
    elseif IsPlayerAlly(pt, ai_player) then
      if most_threatened_town == -1 or town_threat[most_threatened_town] < town_threat[num] then
        set most_threatened_town = num
      endif
      // call DisplayToAll("Town threatened "+Int2Str(num)+" Threat: "+Int2Str(R2I(town_threat[num])))
      // call PingMinimapEx(GetLocationX(town_loc[num]), GetLocationY(town_loc[num]), 4, 255, 0, 0, true)
    else  //  Enemy
      if most_threatened_enemy_town == -1 or town_threat[most_threatened_enemy_town] < town_threat[num] then
        set most_threatened_enemy_town = num
      endif
    endif
  endif
  set loc = null
  set pt = null
  set pa = null
endfunction

function UpdateTownThreat takes nothing returns nothing
  local integer i = lastFreeNum
  local real accepted_threat_level = LinearInterpolation(atl_time_start, atl_time_end, atl_time_start_val, atl_time_end_val, TimerGetElapsed(tq_timer)) * LinearInterpolation(atl_enemy_start, atl_enemy_end, atl_enemy_start_mult, atl_enemy_end_mult, c_enemy_total)
  local real playerthreat = 0
  local integer enemy_army = -1
  local integer threatmark = most_threatened_town
  loop
    exitwhen i >= town_num
    if i > 0 and ModuloInteger(i, 10) == 0 then
      call Sleep(0.01)  // This can take along time, but this could cause most threatened town to be wrong in other processes, so sleep so at least no other jobs can use this yet
    endif
    set town_threat_army[i] = -1
    if GetPlayerSlotState(Player(town_owner[i])) == PLAYER_SLOT_STATE_PLAYING and GetPlayerStructureCount(Player(town_owner[i]), false) > 0 then
      call UpdateSpecificTownThreat(i)
    else
      if most_threatened_town == i then
        set most_threatened_town = -1
      endif
      if most_threatened_enemy_town == i then
        set most_threatened_enemy_town = -1
      endif
      if most_threatened_player_town == i then
        set most_threatened_player_town = -1
      endif
      if home_town == i then
        set home_town = -1
      endif
      if max_value_town == i then
        set max_value_town = -1
      endif
    endif
    set i = i + 1
  endloop
  if i >= town_num then
    set mode = 3
    set lastFreeNum = 0
    if main_army >= 0 then
      set playerthreat = Pow(full_threat_distance, distance_threat_exponent)
      if playerthreat == 0 then
        set playerthreat = 1
      endif
      set playerthreat = ApplyFleeStrengthModifier(distance_threat_mult * army_strength[main_army] / playerthreat, false) // Converts the players total strength into threat
    endif
    set i = 0
    loop
      exitwhen i >= army_num
      if IsPlayerAlly(Player(army_owner[i]), ai_player) then
        set playerthreat = playerthreat + army_strength[i]
      endif
      set i = i + 1
    endloop
    if most_threatened_town >= 0 and town_threat[most_threatened_town] > 0 then
      call Trace("ThreatenedTownThreat: " + Real2Str(town_threat[most_threatened_town]) + " AcceptedThreatLevel: " + Real2Str(accepted_threat_level))
    endif
    if most_threatened_player_town >= 0 and town_threat[most_threatened_player_town] > 0 and town_threat[most_threatened_player_town] <= playerthreat then
      call Trace("PlayerThreatenedTownThreat: " + Real2Str(town_threat[most_threatened_player_town]) + " AcceptedThreatLevel: " + Real2Str(accepted_threat_level))
    endif
    if most_threatened_player_town >= 0 and town_threat[most_threatened_player_town] > accepted_threat_level then //and town_threat[most_threatened_town] > (I2R(c_ally_total + 1) / c_enemy_total) * town_threat[most_threatened_enemy_town] then
      set town_threatened = true
      set town_threat_count = 0
      set most_threatened_town = most_threatened_player_town
      set enemy_army = town_threat_army[most_threatened_town]
      if enemy_army >= 0 and not IsVisibleToPlayer(GetLocationX(town_loc[most_threatened_town]), GetLocationY(town_loc[most_threatened_town]), Player(army_owner[enemy_army])) and threatmark != most_threatened_town then  // Prevent interruption attacks
        call SetCaptainHome(BOTH_CAPTAINS,GetLocationX(army_loc[enemy_army]), GetLocationY(army_loc[enemy_army]))
      elseif threatmark != most_threatened_player_town then
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_player_town]), GetLocationY(town_loc[most_threatened_player_town]))
      endif
      set captain_home = town_loc[most_threatened_player_town]
      set captain_tp = town_can_tp[most_threatened_player_town]
    elseif most_threatened_town >= 0 and town_threat[most_threatened_town] > accepted_threat_level * 1.05 and town_threat[most_threatened_town] <= playerthreat then
      set town_threatened = true
      set town_threat_count = 0
      set enemy_army = town_threat_army[most_threatened_town]
      if enemy_army >= 0 and not IsVisibleToPlayer(GetLocationX(town_loc[most_threatened_town]), GetLocationY(town_loc[most_threatened_town]), Player(army_owner[enemy_army])) and threatmark != most_threatened_town then  // Prevent interruption attacks
        call SetCaptainHome(BOTH_CAPTAINS,GetLocationX(army_loc[enemy_army]), GetLocationY(army_loc[enemy_army]))
      elseif threatmark != most_threatened_town then
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_town]), GetLocationY(town_loc[most_threatened_town]))
      endif
      set captain_home = town_loc[most_threatened_town]
      set captain_tp = town_can_tp[most_threatened_town]
    elseif town_threatened and town_threat_count < 3 and (most_threatened_town >= 0 or most_threatened_player_town >= 0) then
      // persist town threat a bit longer around picked town before standing down
      set town_threat_count = town_threat_count + 1
    elseif most_threatened_player_town >= 0 and town_threat[most_threatened_player_town] > 0 and town_threat[most_threatened_player_town] <= playerthreat then
      if town_threatened then
        set town_threatened = false
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_player_town]), GetLocationY(town_loc[most_threatened_player_town]))
      endif
      set captain_home = town_loc[most_threatened_player_town]
      set captain_tp = town_can_tp[most_threatened_player_town]
    elseif most_threatened_town >= 0 and town_threat[most_threatened_town] > 0 and town_threat[most_threatened_town] <= playerthreat then
      if town_threatened then
        set town_threatened = false
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[most_threatened_town]), GetLocationY(town_loc[most_threatened_town]))
      endif
      set captain_home = town_loc[most_threatened_town]
      set captain_tp = town_can_tp[most_threatened_town]
    elseif home_town >= 0 then
      if town_threatened then
        set town_threatened = false
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(town_loc[home_town]), GetLocationY(town_loc[home_town])) // Return to known home town
      endif
      set captain_home = town_loc[home_town]
      set captain_tp = town_can_tp[home_town]
    else
      if town_threatened then
        set town_threatened = false
        call SetCaptainHome(BOTH_CAPTAINS, GetLocationX(home_location), GetLocationY(home_location)) // Final fallback, just use start location
      endif
      set captain_home = home_location
      set captain_tp = true
    endif
  else
    set lastFreeNum = i
    call TQAddJob(1, ARMY_TRACK, 0)
  endif
endfunction

function ArmyTrackJob takes nothing returns nothing
  //local unit alliance = null
  call DisplayToAllJobDebug("ARMY_TRACK JOB START")
  if mode == 0 then
    call TrackExistingArmies()
  endif
  if mode == 1 then
    call SeedNewArmies()
  endif
  if mode == 2 then
    call UpdateTownThreat()
  endif
  if mode == 3 then
    set mode = 0
    call TQAddJob(4 + 1 * sleep_multiplier, TOWN_TRACK, 0)
  endif
endfunction
#ENDIF