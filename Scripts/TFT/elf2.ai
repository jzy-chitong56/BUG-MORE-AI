//==================================================================================================
//  $Id: elf.ai,v 1.18 2003/04/23 19:26:00 bfitch Exp $
//==================================================================================================
globals
    boolean basic_opening       = true
    boolean archer_opening      = true

    integer wave                = 0

    boolean b_acid_breath       = false
    boolean b_hero1_done        = false
    boolean b_hero2_done        = false
    boolean b_hero3_done        = false
    boolean b_hero4_done        = false
    integer c_altar_done        = 0
    integer c_archer            = 0
    integer c_archer_done       = 0
    integer c_ballista          = 0
    integer c_ballista_done     = 0
    integer c_bear              = 0
    integer c_bear_done         = 0
    integer c_chimaera          = 0
    integer c_chimaera_done     = 0
    integer c_dragon_done       = 0
    integer c_dryad             = 0
    integer c_dryad_done        = 0
    integer c_hippo_done        = 0
    integer c_food_made         = 0
    integer c_food_used         = 0
    integer c_food_max          = GetPlayerState(Player(GetAiPlayer()), PLAYER_STATE_FOOD_CAP_CEILING)
    integer c_gold              = 0
    integer c_gold_owned        = 0
    integer c_hero1_done        = 0
    integer c_hero2_done        = 0
    integer c_hero3_done        = 0
    integer c_hunt_hall_done    = 0
    integer c_huntress          = 0
    integer c_huntress_done     = 0
    integer c_lore_done         = 0
    integer c_mines             = 0
    integer c_mines_done        = 0
    integer c_moon_well         = 0
    integer c_moon_well_done    = 0
    integer c_mtn_giant         = 0
    integer c_mtn_giant_done    = 0
    integer c_roost_done        = 0
    integer c_talon             = 0
    integer c_talon_done        = 0
    integer c_tree_ages_done    = 0
    integer c_tree_etern_done   = 0
    integer c_tree_life         = 0
    integer c_tree_life_done    = 0
    integer c_war_done          = 0
    integer c_wind_done         = 0
    integer c_wisp              = 0
    integer c_wisp_done         = 0
    integer c_wonders_done      = 0
    integer c_zeps              = 0
    integer hero_id4            = 0
    integer array skills4
    boolean HarvestFix          = false
    unit array laboratory
    unit array herounit
    unit shop = null
    location homeloc = GetStartLocationLoc(GetPlayerStartLocation(Player(GetAiPlayer())))
endglobals

//--------------------------------------------------------------------------------------------------
//  set_skills
//--------------------------------------------------------------------------------------------------
function set_skills takes nothing returns nothing

    set skill[ 1] = TRUESHOT
    set skill[ 2] = SEARING_ARROWS
    set skill[ 3] = TRUESHOT
    set skill[ 4] = SEARING_ARROWS
    set skill[ 5] = TRUESHOT
    set skill[ 6] = STARFALL
    set skill[ 7] = SEARING_ARROWS
    set skill[ 8] = SCOUT
    set skill[ 9] = SCOUT
    set skill[10] = SCOUT
    call SetSkillArray(1,MOON_CHICK)

    set skill[ 1] = SEARING_ARROWS
    set skill[ 2] = TRUESHOT
    set skill[ 3] = SEARING_ARROWS
    set skill[ 4] = TRUESHOT
    set skill[ 5] = SEARING_ARROWS
    set skill[ 6] = STARFALL
    set skill[ 7] = TRUESHOT
    set skill[ 8] = SCOUT
    set skill[ 9] = SCOUT
    set skill[10] = SCOUT
    call SetSkillArray(2,MOON_BABE)
    call SetSkillArray(3,MOON_HONEY)

    set skill[ 1] = FORCE_NATURE
    set skill[ 2] = ENT_ROOTS
    set skill[ 3] = FORCE_NATURE
    set skill[ 4] = ENT_ROOTS
    set skill[ 5] = FORCE_NATURE
    set skill[ 6] = TRANQUILITY
    set skill[ 7] = ENT_ROOTS
    set skill[ 8] = THORNS_AURA
    set skill[ 9] = THORNS_AURA
    set skill[10] = THORNS_AURA

    call SetSkillArray(1,KEEPER)

    set skill[ 1] = ENT_ROOTS
    set skill[ 2] = THORNS_AURA
    set skill[ 3] = ENT_ROOTS
    set skill[ 4] = THORNS_AURA
    set skill[ 5] = ENT_ROOTS
    set skill[ 6] = TRANQUILITY
    set skill[ 7] = THORNS_AURA
    set skill[ 8] = FORCE_NATURE
    set skill[ 9] = FORCE_NATURE
    set skill[10] = FORCE_NATURE

    call SetSkillArray(2,KEEPER)

    set skill[ 1] = FORCE_NATURE
    set skill[ 2] = ENT_ROOTS
    set skill[ 3] = FORCE_NATURE
    set skill[ 4] = THORNS_AURA
    set skill[ 5] = ENT_ROOTS
    set skill[ 6] = TRANQUILITY
    set skill[ 7] = THORNS_AURA
    set skill[ 8] = ENT_ROOTS
    set skill[ 9] = THORNS_AURA
    set skill[10] = FORCE_NATURE
    call SetSkillArray(3,KEEPER)

    set skill[ 1] = MANA_BURN
    set skill[ 2] = EVASION
    set skill[ 3] = IMMOLATION
    set skill[ 4] = EVASION
    set skill[ 5] = MANA_BURN
    set skill[ 6] = METAMORPHOSIS
    set skill[ 7] = EVASION
    set skill[ 8] = IMMOLATION
    set skill[ 9] = MANA_BURN
    set skill[10] = IMMOLATION
    call SetSkillArray(1,DEMON_HUNTER)

    set skill[ 1] = MANA_BURN
    set skill[ 2] = EVASION
    set skill[ 3] = MANA_BURN
    set skill[ 4] = EVASION
    set skill[ 5] = MANA_BURN
    set skill[ 6] = METAMORPHOSIS
    set skill[ 7] = EVASION
    set skill[ 8] = IMMOLATION
    set skill[ 9] = IMMOLATION
    set skill[10] = IMMOLATION

    call SetSkillArray(2,DEMON_HUNTER)

    set skill[ 1] = IMMOLATION
    set skill[ 2] = MANA_BURN
    set skill[ 3] = EVASION
    set skill[ 4] = MANA_BURN
    set skill[ 5] = EVASION
    set skill[ 6] = METAMORPHOSIS
    set skill[ 7] = MANA_BURN
    set skill[ 8] = EVASION
    set skill[ 9] = IMMOLATION
    set skill[10] = IMMOLATION
    call SetSkillArray(3,DEMON_HUNTER)

    set skill[ 1] = FAN_KNIVES
    set skill[ 2] = SHADOW_TOUCH
    set skill[ 3] = FAN_KNIVES
    set skill[ 4] = BLINK
    set skill[ 5] = FAN_KNIVES
    set skill[ 6] = VENGEANCE
    set skill[ 7] = SHADOW_TOUCH
    set skill[ 8] = BLINK
    set skill[ 9] = SHADOW_TOUCH
    set skill[10] = BLINK
    call SetSkillArray(1,WARDEN)

    set skill[ 1] = SHADOW_TOUCH
    set skill[ 2] = BLINK
    set skill[ 3] = SHADOW_TOUCH
    set skill[ 4] = FAN_KNIVES
    set skill[ 5] = SHADOW_TOUCH
    set skill[ 6] = VENGEANCE
    set skill[ 7] = FAN_KNIVES
    set skill[ 8] = BLINK
    set skill[ 9] = FAN_KNIVES
    set skill[10] = BLINK
    call SetSkillArray(2,WARDEN)

    set skill[ 1] = SHADOW_TOUCH
    set skill[ 2] = FAN_KNIVES
    set skill[ 3] = SHADOW_TOUCH
    set skill[ 4] = FAN_KNIVES
    set skill[ 5] = SHADOW_TOUCH
    set skill[ 6] = VENGEANCE
    set skill[ 7] = FAN_KNIVES
    set skill[ 8] = BLINK
    set skill[ 9] = BLINK
    set skill[10] = BLINK
    call SetSkillArray(3,WARDEN)

    if hero_id != DEMON_HUNTER and hero_id2 != DEMON_HUNTER and hero_id3 != DEMON_HUNTER then
        set hero_id4 = DEMON_HUNTER
    elseif hero_id != KEEPER and hero_id2 != KEEPER and hero_id3 != KEEPER then
        set hero_id4 = KEEPER
    elseif hero_id != MOON_BABE and hero_id2 != MOON_BABE and hero_id3 != MOON_BABE then
        set hero_id4 = MOON_BABE
    elseif hero_id != WARDEN and hero_id2 != WARDEN and hero_id3 != WARDEN then
        set hero_id4 = WARDEN
    endif
    if hero_id4 == KEEPER then
        set skills4[ 1] = FORCE_NATURE
        set skills4[ 2] = ENT_ROOTS
        set skills4[ 3] = FORCE_NATURE
        set skills4[ 4] = ENT_ROOTS
        set skills4[ 5] = FORCE_NATURE
        set skills4[ 6] = TRANQUILITY
        set skills4[ 7] = ENT_ROOTS
        set skills4[ 8] = THORNS_AURA
        set skills4[ 9] = THORNS_AURA
        set skills4[10] = THORNS_AURA
    elseif hero_id4 == DEMON_HUNTER then
        set skills4[ 1] = MANA_BURN
        set skills4[ 2] = IMMOLATION
        set skills4[ 3] = MANA_BURN
        set skills4[ 4] = EVASION
        set skills4[ 5] = MANA_BURN
        set skills4[ 6] = METAMORPHOSIS
        set skills4[ 7] = EVASION
        set skills4[ 8] = IMMOLATION
        set skills4[ 9] = EVASION
        set skills4[10] = IMMOLATION
    elseif hero_id4 == WARDEN then
        set skills4[ 1] = SHADOW_TOUCH
        set skills4[ 2] = FAN_KNIVES
        set skills4[ 3] = SHADOW_TOUCH
        set skills4[ 4] = BLINK
        set skills4[ 5] = SHADOW_TOUCH
        set skills4[ 6] = VENGEANCE
        set skills4[ 7] = FAN_KNIVES
        set skills4[ 8] = BLINK
        set skills4[ 9] = FAN_KNIVES
        set skills4[10] = BLINK
    elseif hero_id4 == MOON_BABE then
        set skills4[ 1] = SEARING_ARROWS
        set skills4[ 2] = TRUESHOT
        set skills4[ 3] = SEARING_ARROWS
        set skills4[ 4] = TRUESHOT
        set skills4[ 5] = SEARING_ARROWS
        set skills4[ 6] = STARFALL
        set skills4[ 7] = TRUESHOT
        set skills4[ 8] = SCOUT
        set skills4[ 9] = SCOUT
        set skills4[10] = SCOUT
    endif
endfunction

// fix 1.31 hero cannot Learning Skills
function SetHeroUint takes unit u, integer id returns unit
    local group g = CreateGroup()
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    loop
        set u = FirstOfGroup(g)
        exitwhen u == null
        if GetUnitTypeId(u) == id and UnitAlive(u) and not IsUnitHidden(u) then
            call DestroyGroup(g)
            set g = null
            return u
        endif
        call GroupRemoveUnit(g, u )
    endloop
    call DestroyGroup(g)
    set g = null
    return u
endfunction

function SkillArraysfix takes nothing returns integer
    local integer level = GetHeroLevelAI()
    local integer id = GetHeroId()
    local integer i = 0
    local integer sk = 0
    if level > max_hero_level then
        set max_hero_level = level
    endif
    if id == hero_id then
        set i = 1
        set sk = skills1[level]
    elseif id == hero_id2 then
        set i = 2
        set sk = skills2[level]
    elseif id == hero_id3 then
        set i = 3
        set sk = skills3[level]
    elseif id == hero_id4 then
        set i = 4
        set sk = skills4[level]
    else
        return 0
    endif

    if herounit[i] == null then
        set herounit[i] = SetHeroUint(herounit[i], id)
    endif
    if herounit[i] != null and UnitAlive(herounit[i]) then
        call SelectHeroSkill(herounit[i], sk)
        if level == 6 and id == DEATH_KNIGHT then
            call SelectHeroSkill(herounit[i], 'AUa2')
        endif
    endif
    return sk
endfunction

//--------------------------------------------------------------------------------------------------
//  setup_force
//--------------------------------------------------------------------------------------------------
function setup_force takes nothing returns nothing
    call AwaitMeleeHeroes()
    call InitMeleeGroup()

    call SetMeleeGroup( hero_id         )
    call SetMeleeGroup( hero_id2        )
    call SetMeleeGroup( hero_id3        )
    call SetMeleeGroup( ARCHER          )
    call SetMeleeGroup( HUNTRESS        )
    call SetMeleeGroup( DRUID_TALON     )
    call SetMeleeGroup( DRUID_CLAW      )
    call SetMeleeGroup( DRYAD           )
    call SetMeleeGroup( CHIMAERA        )
    call SetMeleeGroup( MOUNTAIN_GIANT  )
    call SetMeleeGroup( FAERIE_DRAGON   )

    if GetUnitCountDone(HIPPO) > 0 then
        call SetMeleeGroup( HIPPO )
    endif

    if GetUnitCountDone(HIPPO_RIDER) > 0 then
        call SetMeleeGroup( HIPPO_RIDER )
    endif
    call SetMeleeGroup( DRUID_TALON_M   )
    call SetMeleeGroup( DRUID_CLAW_M    )

    if GetUnitCountDone(hero_id4) > 0 then
        call SetMeleeGroup( hero_id4    )
    endif

    //orc
    call SetMeleeGroup( GRUNT           )
    call SetMeleeGroup( RAIDER          )
    call SetMeleeGroup( TAUREN          )
    call SetMeleeGroup( HEAD_HUNTER     )
    call SetMeleeGroup( BERSERKER       )
    call SetMeleeGroup( WYVERN          )
    call SetMeleeGroup( WITCH_DOCTOR    )
    call SetMeleeGroup( SHAMAN          )
    call SetMeleeGroup( KODO_BEAST      )
    call SetMeleeGroup( BATRIDER        )
    call SetMeleeGroup( SPIRIT_WALKER   )

    //human
    call SetMeleeGroup( FOOTMEN         )
    call SetMeleeGroup( KNIGHT          )
    call SetMeleeGroup( RIFLEMEN        )
    call SetMeleeGroup( PRIEST          )
    call SetMeleeGroup( SORCERESS       )
    call SetMeleeGroup( GRYPHON         )
    call SetMeleeGroup( COPTER          )
    call SetMeleeGroup( SPELL_BREAKER   )
    call SetMeleeGroup( HUMAN_DRAGON_HAWK)
    call SetMeleeGroup( TANK )
    call SetMeleeGroup( ROCKET_TANK     )

    //ud
    call SetMeleeGroup( GHOUL           )
    call SetMeleeGroup( CRYPT_FIEND     )
    call SetMeleeGroup( ABOMINATION     )
    call SetMeleeGroup( NECRO           )
    call SetMeleeGroup( BANSHEE         )
    call SetMeleeGroup( GARGOYLE        )
    call SetMeleeGroup( FROST_WYRM      )
    call SetMeleeGroup( OBS_STATUE      )
    if GetUnitCountDone(BLK_SPHINX) > 0 then
        call SetMeleeGroup( BLK_SPHINX  )
    endif
    call SetMeleeGroup( SHADE       )
    call SetInitialWave(10)
endfunction

//--------------------------------------------------------------------------------------------------
//  force_level
//--------------------------------------------------------------------------------------------------
function force_level takes nothing returns integer
    local integer level = 4
    set level = level +      c_dragon_done + c_talon_done
    set level = level + 2 *  c_archer_done / 3
    set level = level + 2 *  c_dryad_done
    set level = level + 3 *  c_huntress_done
    set level = level + 4 * (c_chimaera_done + c_bear_done)
    set level = level + 5 *  c_hero3_done
    set level = level + 6 * (c_hero2_done + c_mtn_giant_done)
    return level
endfunction

//--------------------------------------------------------------------------------------------------
//  attack_sequence
//--------------------------------------------------------------------------------------------------
function attack_sequence takes nothing returns nothing
    local boolean needs_exp
    local boolean has_siege
    local boolean air_units
    local integer level

    loop
        exitwhen c_hero1_done > 0 and c_archer_done >= 2
        call Sleep(2)
    endloop

    if MeleeDifficulty() == MELEE_NEWBIE then
        call Sleep(240)
    endif

    call StaggerSleep(0,2)
    loop
        loop
            exitwhen not CaptainRetreating()
            call Sleep(2)
        endloop

        set wave = wave + 1
        if wave == 2 then
            loop
                exitwhen c_archer_done >= 4 or not basic_opening
                call Sleep(2)
            endloop
        endif

        call setup_force()

        set level = force_level()
        set max_creeps = level * 4 / 5
        set min_creeps = max_creeps - 10
        if min_creeps < 0 then
            set min_creeps = 0
        endif

        set needs_exp        = take_exp and (level >= 9 or c_gold_owned < 2000)
        set has_siege        = level >= 40 or c_ballista_done > 0 or c_chimaera_done > 0 or c_mtn_giant_done > 0
        set air_units        = c_chimaera_done > 0 or c_dragon_done > 0
        set allow_air_creeps = air_units or c_archer_done > 3

        call SingleMeleeAttack(needs_exp,has_siege,false,air_units)

        if MeleeDifficulty() == MELEE_NEWBIE then
            call Sleep(60)
        endif
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
//  init_vars
//--------------------------------------------------------------------------------------------------
function init_vars takes nothing returns nothing

    set b_acid_breath       = GetUpgradeLevel(UPG_CHIM_ACID) >= 1
    set b_hero1_done        = b_hero1_done or GetUnitCountDone(hero_id) > 0
    set b_hero2_done        = b_hero2_done or GetUnitCountDone(hero_id2) > 0
    set b_hero3_done        = b_hero3_done or GetUnitCountDone(hero_id3) > 0
    set b_hero4_done        = b_hero4_done or GetUnitCountDone(hero_id4) > 0
    set c_altar_done        = GetUnitCountDone(ELF_ALTAR)
    set c_archer            = GetUnitCount(ARCHER)
    set c_archer_done       = GetUnitCountDone(ARCHER)
    set c_ballista          = GetUnitCount(BALLISTA)
    set c_ballista_done     = GetUnitCountDone(BALLISTA)
    set c_bear              = TownCount(DRUID_CLAW)
    set c_bear_done         = TownCountDone(DRUID_CLAW)
    set c_chimaera          = GetUnitCount(CHIMAERA)
    set c_chimaera_done     = GetUnitCountDone(CHIMAERA)
    set c_dragon_done       = GetUnitCountDone(FAERIE_DRAGON)
    set c_dryad             = GetUnitCount(DRYAD)
    set c_dryad_done        = GetUnitCountDone(DRYAD)
    set c_hippo_done        = GetUnitCountDone(HIPPO)
    set c_gold              = GetGold()
    set c_gold_owned        = GetGoldOwned()
    set c_hero1_done        = GetUnitCountDone(hero_id)
    set c_hero2_done        = GetUnitCountDone(hero_id2)
    set c_hero3_done        = GetUnitCountDone(hero_id3)
    set c_hunt_hall_done    = GetUnitCountDone(HUNTERS_HALL)
    set c_huntress          = GetUnitCount(HUNTRESS)
    set c_huntress_done     = GetUnitCountDone(HUNTRESS)
    set c_lore_done         = GetUnitCountDone(ANCIENT_LORE)
    set c_mines_done        = GetUnitCountDone(ELF_MINE)
    if HarvestFix then
        set c_mines         = c_mines_done
    else
        set c_mines         = GetMinesOwned()
    endif
    set c_moon_well         = GetUnitCount(MOON_WELL)
    set c_moon_well_done    = GetUnitCountDone(MOON_WELL)
    set c_mtn_giant         = GetUnitCount(MOUNTAIN_GIANT)
    set c_mtn_giant_done    = GetUnitCountDone(MOUNTAIN_GIANT)
    set c_roost_done        = GetUnitCountDone(CHIMAERA_ROOST)
    set c_talon             = TownCount(DRUID_TALON)
    set c_talon_done        = TownCountDone(DRUID_TALON)
    set c_tree_ages_done    = TownCountDone(TREE_AGES)
    set c_tree_etern_done   = TownCountDone(TREE_ETERNITY)
    set c_tree_life         = TownCount(TREE_LIFE)
    set c_tree_life_done    = TownCountDone(TREE_LIFE)
    set c_war_done          = GetUnitCountDone(ANCIENT_WAR)
    set c_wind_done         = GetUnitCountDone(ANCIENT_WIND)
    set c_wisp              = GetUnitCount(WISP)
    set c_wisp_done         = GetUnitCountDone(WISP)
    set c_wonders_done      = GetUnitCountDone(DEN_OF_WONDERS)
    set c_zeps              = GetUnitCount(ZEPPELIN)
    set c_food_made         = GetUnitCountDone(TREE_LIFE) * GetFoodMade(TREE_LIFE) + GetUnitCountDone(TREE_AGES) * GetFoodMade(TREE_AGES) + GetUnitCountDone(TREE_ETERNITY) * GetFoodMade(TREE_ETERNITY) + c_moon_well_done * GetFoodMade(MOON_WELL)
    set c_food_used         = FoodUsed()
    if c_food_made > c_food_max then
      set c_food_made = c_food_max
    endif

    if basic_opening then

        if c_tree_ages_done > 0 then
            set basic_opening = false
        endif

        if archer_opening and c_archer_done >= 6 then
            set archer_opening = false
        endif
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  set_vars
//--------------------------------------------------------------------------------------------------
function set_vars takes nothing returns nothing
    loop
        call init_vars()
        call Sleep(1)
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
//  buy_item
//--------------------------------------------------------------------------------------------------
function Distance_BetweenLoc_dk takes location locA, location locB returns real
  local real x = GetLocationX(locB) - GetLocationX(locA)
  local real y = GetLocationY(locB) - GetLocationY(locA)
  call RemoveLocation(locA)
  return SquareRoot(x * x + y * y)
endfunction

function SetShop takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    loop
        set u = FirstOfGroup(g)
        exitwhen u == null
        if GetUnitTypeId(u) == 'eden' and UnitAlive(u) and not IsUnitHidden(u) then
            set shop = u
            exitwhen true
        endif
        call GroupRemoveUnit(g, u)
    endloop
    call DestroyGroup(g)
    set g = null
    set u = null
endfunction

function Buy_Item takes integer item_id, boolean stack, boolean buyneed returns nothing
    local integer i = 1
    local integer c = 0
    local integer sum = 0
    local unit u = null
    local item t = null
    local location l = null
    if buyneed and c_gold > 800 and not TownThreatened() and not CaptainInCombat(false) and shop != null and UnitAlive(shop) then
        loop
            exitwhen i > 4
            if herounit[i] != null and UnitAlive(herounit[i]) then
                loop
                    exitwhen c > 5
                    set t = UnitItemInSlot(herounit[i], c)
                    if t == null then
                        set sum = sum + 1
                    elseif GetItemTypeId(t) == item_id then
                        if stack then
                            set sum = sum + 1
                        else
                            set sum = - 1
                            set c = 5
                        endif
                    endif
                    set c = c + 1
                endloop
                set c = 0
                if sum > 0 then
                    set u = herounit[i]
                    set i = 4
                endif
                set sum = 0
            endif
            set i = i + 1
        endloop
        if u != null then
            set l = GetUnitLoc(u)
            if Distance_BetweenLoc_dk(GetUnitLoc(shop), l) < 550 then
                call IssueTargetOrderById(shop, 'Aall', u)
                call Sleep(GetRandomInt(2,3))
                call IssueNeutralImmediateOrderById(ai_player, shop, item_id)
            endif
            call RemoveLocation(l)
            set l = null
            set u = null
        endif
        set t = null
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  basics
//--------------------------------------------------------------------------------------------------
function basics takes integer food returns nothing
    local integer archers
    local integer hunts

    if c_war_done == 0 then
        return
    endif

    if archer_opening or c_hunt_hall_done < 1 then

        set archers = food / 2
        if archers > 6 then
            set archers = 6
        endif

        call SetBuildUnit( archers, ARCHER )
        return
    endif

    set hunts = (food - 2 * c_archer) / 3
    if hunts > 3 then
        set hunts = 3
    endif

    call SetBuildUnit( hunts, HUNTRESS )

    if food >= 15 then
        call SetBuildUnit( 3, ARCHER )
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  do_upgrades
//--------------------------------------------------------------------------------------------------
function do_upgrades takes nothing returns nothing

    if c_tree_etern_done >= 1 then
        if c_hunt_hall_done >= 1 then
            call SetBuildUpgr( 1, UPG_WELL_SPRING )
        endif
        call SetBuildUpgr( 1, UPG_BLESSING    )
    endif
    if c_dryad >= 1 and c_lore_done >= 1 then
        call SetBuildUpgr( 1, UPG_ABOLISH     )
    endif
    if c_wind_done > 0 and c_archer + c_hippo_done > 6 then
        call SetBuildUpgr( 1, UPG_HIPPO_TAME  )
    endif

    if c_roost_done >= 1 then
        call SetBuildUpgr( 1, UPG_CHIM_ACID   )
    endif

    if c_hunt_hall_done >= 1 then

        if c_archer + c_huntress + c_ballista >= 3 then

            call SetBuildUpgr( 1, UPG_STR_MOON      )
            call SetBuildUpgr( 1, UPG_MOON_ARMOR    )

            if c_tree_ages_done >= 1 then
                call SetBuildUpgr( 2, UPG_STR_MOON      )
                call SetBuildUpgr( 2, UPG_MOON_ARMOR    )

                if c_tree_etern_done >= 1 then
                    call SetBuildUpgr( 3, UPG_STR_MOON      )
                    call SetBuildUpgr( 3, UPG_MOON_ARMOR    )
                endif
            endif
        endif

        if c_dryad + c_mtn_giant + c_chimaera >= 3 then

            call SetBuildUpgr( 1, UPG_STR_WILD      )
            call SetBuildUpgr( 1, UPG_HIDES         )

            if c_tree_ages_done >= 1 then
                call SetBuildUpgr( 2, UPG_STR_WILD      )
                call SetBuildUpgr( 2, UPG_HIDES         )

                if c_tree_etern_done >= 1 then
                    call SetBuildUpgr( 3, UPG_STR_WILD      )
                    call SetBuildUpgr( 3, UPG_HIDES         )
                endif
            endif
        endif
    endif

    if c_mtn_giant >= 1 and c_tree_etern_done >= 1 and c_wonders_done >= 1 and c_lore_done >= 1 then
        call SetBuildUpgr( 1, UPG_HARD_SKIN   )
        call SetBuildUpgr( 1, UPG_RESIST_SKIN )
    endif

    if c_war_done >= 1 then

        if c_huntress >= 3 and c_hunt_hall_done >= 1 then
            if c_tree_etern_done >= 1 then
                call SetBuildUpgr( 1, UPG_GLAIVE      )
            endif
            if c_tree_ages_done > 0 then
                call SetBuildUpgr( 1, UPG_SCOUT       )
            endif
        endif

        if c_archer >= 3 then
            if c_tree_ages_done >= 1 then
                call SetBuildUpgr( 1, UPG_BOWS      )

                if c_tree_etern_done >= 1 and c_hunt_hall_done >= 1 then
                    call SetBuildUpgr( 1, UPG_MARKSMAN  )
                endif
            endif
        endif
        if c_ballista >= 1 and c_tree_ages_done >= 1 and c_hunt_hall_done >= 1 then
            call SetBuildUpgr( 1, 'Repb'        )
        endif
    endif
    if c_hunt_hall_done > 0 then
        call SetBuildUpgr( 1, UPG_ULTRAVISION )
    endif

    if c_lore_done >= 1 and c_bear >= 1 then

        call SetBuildUpgr( 1, UPG_DRUID_CLAW  )

        if c_tree_etern_done >= 1 then
            call SetBuildUpgr( 2, UPG_DRUID_CLAW  )
            call SetBuildUpgr( 1, UPG_MARK_CLAW   )
        endif
    endif
    if c_wind_done > 0 and c_talon >= 1 then

        call SetBuildUpgr( 1, UPG_DRUID_TALON )

        if c_tree_etern_done >= 1 then
            call SetBuildUpgr( 2, UPG_DRUID_TALON )
            call SetBuildUpgr( 1, UPG_MARK_TALON  )
        endif
    endif
endfunction

//--------------------------------------------------------------------------------------------------
//  build_sequence
//--------------------------------------------------------------------------------------------------
function build_hero_fix takes integer heronum, boolean herodone, integer heroid, integer num returns nothing
    local integer i = 0
    if heronum < 1 and c_altar_done > 0 then
      if herodone then  // resurrection no need wood, only can forcibly fix
        set i = GetUnitGoldCost(heroid)
        if herounit[num] != null and c_food_made - c_food_used >= 5 then
          set i = Min(i * 4, Min(i * R2I(0.4 + 0.1 * (GetHeroLevel(herounit[num]) - 1)), 700))
          if c_gold >= i then
            set total_gold = Max(0, total_gold - i) // compensation
            call SetProduce(1,heroid,-1)
            return
          endif
        endif
        if c_gold >= GetUnitGoldCost(heroid) and GetWood() >= GetUnitWoodCost(heroid) then  // Prevent StartUnit function interruptions
          call SetBuildUnit(1, heroid)  // only can add sequence
        endif
      else  // build
        if num == 1 and c_food_made - c_food_used >= 5 then  // build first hero no need gold and wood -- just melee map , cannot custom map
          call SetProduce(1,heroid,-1)
          return
        endif
        call SetBuildUnit(1, heroid)  // only can add sequence
      endif
    endif
endfunction

function build_sequence takes nothing returns nothing
    local boolean primary_melee
    local integer wisps

    call InitBuildArray()

    if basic_opening then
        call SetBuildUnit(  1, TREE_LIFE        )
        call SetBuildUnit(  2, WISP             )
        call SetBuildUnit(  1, ELF_ALTAR        )
        call SetBuildUnit(  7, WISP             )
        call SetBuildUnit(  1, MOON_WELL        )
        call SetBuildUnit(  8, WISP             )
        call SetBuildUnit(  1, ANCIENT_WAR      )
        call build_hero_fix(GetUnitCount(hero_id), b_hero1_done, hero_id, 1)
        call SetBuildUnit(  9, WISP             )
        call SetBuildUnit(  2, MOON_WELL        )
        call SetBuildUnit( 10, WISP             )
        call basics(2)// (  1, ARCHER           )
        call basics(4)// (  2, ARCHER           )
        call SetBuildUnit( 11, WISP             )
        call basics(6)// (  3, ARCHER           )
        call SetBuildUnit( 12, WISP             )
        call SetBuildUnit(  1, HUNTERS_HALL     )
        call SetBuildUnit(  3, MOON_WELL        )
        call SetBuildUnit( 13, WISP             )
        call basics(8)// (  4, ARCHER           )
        call SetBuildUnit( 14, WISP             )
        call basics(10)//(  5, ARCHER           )
        call SetBuildUnit( 15, WISP             )
        call basics(15)//(  6, ARCHER           )
                       //(  1, HUNTRESS         )
        call SetBuildUnit(  1, DEN_OF_WONDERS   )
        call SetBuildUnit(  1, TREE_AGES        )
        call BasicExpansion( c_mines < 2, TREE_LIFE )

        if MeleeDifficulty() != MELEE_NEWBIE then
            call GuardSecondary( 1, 2, ANCIENT_PROTECT )
            call GuardSecondary( 1, 1, MOON_WELL )
        endif
        call GuardSecondary( 0, 2, ANCIENT_PROTECT )
        call SetBuildUpgr(  1, UPG_STR_MOON     )
        call SetBuildUpgr(  1, UPG_MOON_ARMOR   )
        call SetBuildUnit(  4, MOON_WELL        )

        if c_tree_ages_done > 0 and MeleeDifficulty() != MELEE_NEWBIE then
            call build_hero_fix(GetUnitCount(hero_id2), b_hero2_done, hero_id2, 2)
        endif

        return
    endif

    if c_tree_life_done > 0 then
        set wisps = 6 - GetWood() / 200
        if wisps < 3 then
            set wisps = 3
        endif
        if c_mines < 2 or c_tree_life_done < 2 then
            set wisps = wisps + 5
        else
            set wisps = wisps + 10
        endif
        if wisps > 15 then
            set wisps = 15
        endif
        call SetBuildNext( wisps, WISP )
    endif

    if c_gold > 500 and GetWood() < 100 then
        call SetBuildNext( 15, WISP )
    endif

    if c_tree_life < 1 and c_wisp_done > 0 then
        call MeleeTownHall( 0, TREE_LIFE )
        call MeleeTownHall( 1, TREE_LIFE )
        call MeleeTownHall( 2, TREE_LIFE )
    endif

    // get enough moon wells to cover food need
    //
    if c_food_used + 6 > c_food_made and c_food_made < c_food_max then
        call SetBuildUnit( c_moon_well_done + 1, MOON_WELL )
    endif

    // having enough gold is the highest priority
    //
    if c_gold_owned < 2000 then
        call BasicExpansion( c_mines < 2, TREE_LIFE )
        call GuardSecondary( 1, 1, ANCIENT_PROTECT )
        call GuardSecondary( 1, 2, ANCIENT_PROTECT )
        call GuardSecondary( 1, 1, MOON_WELL )
    endif

    // recover heroes for basic defense
    //
    if c_altar_done >= 1 then
        if c_hero1_done > 0 then
            if c_hero2_done > 0 then
                if b_hero3_done or c_tree_etern_done >= 1 then
                    call build_hero_fix(GetUnitCount(hero_id3), b_hero3_done, hero_id3, 3)
                endif
                if b_hero4_done then
                    call build_hero_fix(GetUnitCount(hero_id4), b_hero4_done, hero_id4, 4)
                endif
            else
                call build_hero_fix(GetUnitCount(hero_id2), b_hero2_done, hero_id2, 2)
            endif
        else
            call build_hero_fix(GetUnitCount(hero_id), b_hero1_done, hero_id, 1)
        endif
    else
        call SetBuildUnit( 1, ELF_ALTAR )
    endif
    if TownCount(TREE_AGES) < 1 and GetUnitCountDone(TREE_LIFE) > 0 then
        call SetBuildUnit( 1, TREE_AGES   )
    endif
    call BuildFactory( ANCIENT_WAR   )

    // the primary melee force is the mountain giant
    //
   set primary_melee = c_lore_done >= 1 and c_wonders_done >= 1 and c_tree_ages_done >= 1
    if primary_melee then
        call SetBuildUnit( 1, MOUNTAIN_GIANT )

    // the backup melee force is the huntress
    //
    endif
    if c_hunt_hall_done > 0 and c_war_done > 0 then
        call SetBuildUnit( 3, HUNTRESS      )
    endif

    // the primary ranged force is the dryad
    //
    if c_lore_done >= 1 then
        call SetBuildUnit( 2, DRYAD )

    // the backup ranged force is the archer
    //
    elseif c_war_done > 0 then
        call SetBuildUnit( 3, ARCHER        )
    endif

    // need siege to take out enemy towns and expansions
    //
    if b_acid_breath and c_roost_done >= 1 then
        call SetBuildUnit( 2, CHIMAERA )
    endif
    if c_war_done > 0 and c_mtn_giant < 1 and c_hunt_hall_done > 0 then
        call SetBuildUnit( 2, BALLISTA )
    endif

    call SetBuildUnit( 1, HUNTERS_HALL  )
    call SetBuildUnit( 1, DEN_OF_WONDERS )
    if c_tree_ages_done > 0 then
        call SetBuildUnit( 1, ANCIENT_LORE  )
        call SetBuildUnit( 1, ANCIENT_WIND  )
    endif
    if b_hero2_done and GetUnitCountDone(TREE_AGES) > 0 and GetUnitCount(TREE_ETERNITY) < 1 then
        call SetBuildUnit( 1, TREE_ETERNITY )
    endif
    if GetUnitCountDone(TREE_ETERNITY) > 0 then
        call SetBuildUnit(  1, CHIMAERA_ROOST   )
    endif

    // if we have enough gold then advance on the tech tree
    //
    if c_gold > 1000 then

        call GuardSecondary( 1, 1, ANCIENT_PROTECT )
        call GuardSecondary( 1, 2, ANCIENT_PROTECT )
        call GuardSecondary( 1, 2, MOON_WELL )

        call do_upgrades()

        if c_gold > 2000 then
            call BuildFactory( ANCIENT_LORE     )
            call BuildFactory( ANCIENT_WAR      )
            call BuildFactory( CHIMAERA_ROOST   )
            call BuildFactory( ANCIENT_WIND     )
        endif

    elseif c_food_used >= UPKEEP_TIER1 then
        call do_upgrades()
    endif
    call BasicExpansion( c_mines < 2, TREE_LIFE )
    call GuardSecondary( 1, 1, ANCIENT_PROTECT )
    call GuardSecondary( 1, 2, ANCIENT_PROTECT )
    call GuardSecondary( 1, 2, MOON_WELL )
    call GuardSecondary( 1, 1, DEN_OF_WONDERS )
    if c_food_used >= UPKEEP_TIER2 - 10 and c_gold < 2000 then
        return
    endif

    // build units from whatever buildings we already have
    //
    if primary_melee then
        call SetBuildUnit( 3, MOUNTAIN_GIANT )
    elseif c_hunt_hall_done > 0 and c_war_done > 0 then
        call SetBuildUnit( 7, HUNTRESS )
    endif

    if c_lore_done >= 1 then
        call SetBuildNext( 4, DRYAD )
    elseif c_war_done > 0 then
        call SetBuildUnit( 6, ARCHER )
    endif

    if c_tree_ages_done >= 1 then
        if c_lore_done >= 1 then
            call SetBuildUnit( 3, DRUID_CLAW )
        endif
    endif

    if c_wind_done >= 1 then
        if c_wonders_done >= 1 then
            call SetBuildUnit( 1, FAERIE_DRAGON )
        endif

        call SetBuildNext( 2, DRUID_TALON )
        call SetBuildUnit( 1, HIPPO )
    endif
    if c_archer > 3 and c_hippo_done > 3 then
        call Conversions( 2, HIPPO_RIDER )
    endif

    if c_gold_owned < 10000 then
        call BasicExpansion( c_mines < 3, TREE_LIFE )
        call GuardSecondary( 2, 1, ANCIENT_PROTECT )
        call GuardSecondary( 2, 2, ANCIENT_PROTECT )
        call GuardSecondary( 2, 1, MOON_WELL )
    endif

    if c_food_used >= 60 and c_zeps < 3 then
        call GetZeppelin()
    endif
    if c_food_made - c_food_used < 4 and c_food_made < c_food_max + 30 then  // can build more food
        call SetBuildUnit( c_moon_well + 1, MOON_WELL )
    endif
    if c_wonders_done > 0 and (shop == null or not UnitAlive(shop)) then
        call SetShop()
    endif
    call Buy_Item('spre', false,c_tree_etern_done > 0)
endfunction

//--------------------------------------------------------------------------------------------------
//  peon_assignment
//--------------------------------------------------------------------------------------------------
function InitMineCheck takes nothing returns nothing
  call ClearHarvestAI()
  call HarvestGold(0,3)
  call HarvestWood(0,2)  // Early triggering Harvest
endfunction

function HarvestMineFix takes unit mine returns nothing
  local group g = CreateGroup()
  local group tempg = CreateGroup()
  local unit u = null
  local integer i = 0
  local integer delaypeon = 3
  if c_wisp_done > 7 then
    set delaypeon = 5
  endif
  if c_food_made - c_food_used < 1 then
    set delaypeon = 2
  endif
  call GroupEnumUnitsInRangeOfLoc(g, homeloc, 1800, null)
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if UnitAlive(u) and IsUnitType(u, UNIT_TYPE_PEON) and not IsUnitHidden(u) and GetOwningPlayer(u) == ai_player then
      if IsUnitInTransport(u, mine) then
        set i = i + 1
      else
        call GroupAddUnit(tempg, u)
      endif
    endif
    call GroupRemoveUnit(g, u)
  endloop
  if i < delaypeon then
    loop  //use accurate quantity control , prevent any wips harvestmine , but mine no vacancies
      set u = FirstOfGroup(tempg)
      exitwhen i >= delaypeon or u == null
      if not IsUnitType(u, UNIT_TYPE_STRUCTURE) and not IsUnitLoaded(u) then
        call IssueTargetOrder(u, "harvest", mine)
        set i = i + 1
      endif
      if delaypeon == 2 and i > 2 then
        call IssueTargetOrder(u, "unload", mine)
      endif
      call GroupRemoveUnit(tempg, u)
     endloop
  endif
  call DestroyGroup(tempg)
  set tempg = null
  call DestroyGroup(g)
  set g = null
  set u = null
endfunction

function MineCheck takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    local unit m1 = null
    local unit m2 = null
    local unit h1 = null
    local unit h2 = null
    local player p = null
    local integer i = 0
    local integer c = 0
    call GroupEnumUnitsInRangeOfLoc(g, homeloc, 2200, null)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if UnitAlive(u) and not IsUnitHidden(u) then
        set p = GetOwningPlayer(u)
        if GetUnitTypeId(u) == 'egol' and p == ai_player then
          if c < 3 then  //prevent all peon harvest mine , not peon harvest wood
            call HarvestMineFix(u)
          endif
          set c = c + 1
        elseif GetUnitTypeId(u) == 'ngol' and GetResourceAmount(u) > 0 then
          set i = i + 1
          if m1 == null then
            set m1 = u
          elseif m2 == null then
            set m2 = u
          endif
        elseif IsUnitType(u, UNIT_TYPE_TOWNHALL) and p == ai_player then
          if h1 == null then
            set h1 = u
          elseif h2 == null then
            set h2 = u
          endif
        endif
      endif
      call GroupRemoveUnit(g, u)
    endloop
    set HarvestFix = c + i > 0  // home_location no mine
    if GetRandomInt(0,2) == 1 and not TownThreatened() then
      if c < 1 and i > 0 and h1 != null and m1 != null and GetUnitTypeId(h1) != OrderId("entangle") then
        call IssueTargetOrder(h1, "entangle", m1)
      endif
      if c < 2 and i > 1 and h2 != null and m2 != null and GetUnitTypeId(h2) != OrderId("entangle") then
        call IssueTargetOrder(h2, "entangle", m2)
      endif
    endif
    call DestroyGroup(g)
    set g = null
    set m1 = null
    set m2 = null
    set h1 = null
    set h2 = null
    set u = null
    set p = null
endfunction

function TreeEntangleFix takes unit tree, group sg returns group
    local group g = CreateGroup()
    local unit u = null
    local unit u_gold = null
    local integer e_c = 0
    local integer id = 0
    call GroupEnumUnitsInRange(g, GetUnitX(tree), GetUnitY(tree), 1000, null)
    call GroupRemoveUnit(g, tree)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if UnitAlive(u) and not IsUnitHidden(u) then
        set id = GetUnitTypeId(u)
        if GetOwningPlayer(u) == ai_player then
          if id == 'egol' then
            set e_c = e_c + 1
          endif
          call GroupRemoveUnit(sg, u)
        elseif id == 'ngol' then
          set u_gold = u
        endif
      endif
      call GroupRemoveUnit(g, u)
    endloop
    call DestroyGroup(g)
    set g = null
    if e_c == 0 and u_gold != null then  // if have mine , don't know which one to control , afraid destroying existing mine
      call IssueTargetOrder(tree, "entangle", u_gold)
    endif
    set u_gold = null
    return sg
endfunction

function TreeEntangleCheck takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if IsUnitType(u, UNIT_TYPE_TOWNHALL) and UnitAlive(u) and not IsUnitHidden(u) then
        set g = TreeEntangleFix(u, g)
      endif
      call GroupRemoveUnit(g, u)
    endloop
    call DestroyGroup(g)
    set g = null
endfunction

function InitLaboratory takes nothing returns nothing
    local group g = CreateGroup()
    local unit u = null
    local integer i = 0
    if GetPlayerController(Player(12)) == MAP_CONTROL_CREEP then
      call GroupEnumUnitsOfPlayer(g, Player(15), null)
    else
      call GroupEnumUnitsOfPlayer(g, Player(27), null)
    endif
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if GetUnitTypeId(u) == 'ngad' and UnitAlive(u) and not IsUnitHidden(u) then
        set laboratory[i] = u
        set i = i + 1
      endif
      call GroupRemoveUnit(g, u)
    endloop
    call DestroyGroup(g)
    set g = null
endfunction

function BuyShredder takes integer c returns nothing
    local integer i = 0
    if GetWood() > 200 and c_gold > 800 and c_food_made - c_food_used > 5 and GetUnitCountDone('ngir') < 1 and c > GetRandomInt(0, 4) then
      loop
        exitwhen laboratory[i] == null or GetUnitCountDone('ngir') > 0
        if IsVisibleToPlayer(GetUnitX(laboratory[i]), GetUnitY(laboratory[i]), ai_player) then
            call IssueNeutralImmediateOrderById(ai_player, laboratory[i], 'ngir')
        endif
        set i = i + 1
      endloop
    endif
endfunction

function peon_assignment takes nothing returns nothing
    local integer T
    local integer c = 0
    call InitMineCheck()  // if home_location distance 1500 have more mine , ELF and UD cannot harvest (old war3 version distance need 2200+ ), this can fix
    loop
        call ClearHarvestAI()

        set T = TownWithMine()
        if HarvestFix then
            if c == 0 then
                call MineCheck()
            endif
        else
            call HarvestGold(T,4)
            call HarvestWood(0,1)
            call HarvestGold(T,1)
            call HarvestWood(0,2)
        endif
        set c = c + 1
        if c > 6 then
            set c = 0
        endif
        if c_mines_done > 1 then
            call HarvestGold(T+1,5)
        endif
        call HarvestWood(0,20)

        call build_sequence()
        call BuyShredder(c)
        if not HarvestFix and c == 0 and c_tree_life_done > GetUnitCount('egol') then  // mabe some tree no entangle goldmine
            call TreeEntangleCheck()
        endif
        call Sleep(GetRandomInt(1,3))
    endloop
endfunction

//--------------------------------------------------------------------------------------------------
//	main
//--------------------------------------------------------------------------------------------------
function main takes nothing returns nothing
    call PickMeleeHero(RACE_NIGHTELF)
    call set_skills()
    call InitLaboratory()
    call StandardAI(function SkillArraysfix, function peon_assignment, function attack_sequence)
    call StartThread(function set_vars)
    call PlayGame()
endfunction
